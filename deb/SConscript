import os, shutil, sys
Import('env') # exported by parent SConstruct


# Here's the core info for the package
DEBNAME = 'x-viredero'
DEBMAINT = 'Leonid Movshovich (event.riga@gmail.com)'
DEBARCH = 'i386'
DEBDEPENDS = 'libusb-1.0-0 (>= 2:1.0.0), libx11-6, libxdamage1 (>= 1:1.1), libxext6, libxfixes3'
DEBDESC = 'Viredero - virtual reality screen'
try:
    DEBVERSION = os.environ['VERSION']
except KeyError :
    DEBVERSION = 'dev'

DEBFILES = [

    # Now we specify the files to be included in the .deb
    # Where they should go, and where they should be copied from.
    # If you have a lot of files, you may wish to generate this 
    # list in some other way.
    ('usr/bin/x-viredero',             '#x-viredero'),
    ('usr/share/x-viredero/init_hook.sh',  '#init_hook.sh'),
#    ('udev-path/99-android-udev-rule',  '#udev-rule'),
]

# This is the debian package we're going to create
debpkg = '#%s_%s_%s.deb' % (DEBNAME, DEBVERSION, DEBARCH)

# and we want it to be built when we build 'debian'
env.Alias('debian', debpkg)

DEBCONTROLFILE = os.path.join(DEBNAME, 'DEBIAN/control')

# This copies the necessary files into place.
# Fortunately, SCons creates the necessary directories for us.
for f in DEBFILES:
    # We put things in a directory named after the package
    dest = os.path.join(DEBNAME, f[0])
    # The .deb package will depend on this file
    env.Depends(debpkg, dest)
    # Copy from the the source tree.
    env.Command(dest, f[1], Copy('$TARGET','$SOURCE'))
    # The control file also depends on each source because we'd like
    # to know the total installed size of the package
    env.Depends(DEBCONTROLFILE, dest)

# Now to create the control file:

CONTROL_TEMPLATE = '''
Package: %s
Priority: extra
Section: misc
Installed-Size: %s
Maintainer: %s
Architecture: %s
Version: %s
Depends: %s
Description: %s

'''
# This function creates the control file from the template and info
# specified above, and works out the final size of the package.
def make_control(target=None, source=None, env=None):
    installed_size = 0
    for i in DEBFILES:
        installed_size += os.stat(str(env.File(i[1])))[6]
    control_info = CONTROL_TEMPLATE % (
        DEBNAME, installed_size, DEBMAINT, DEBARCH, DEBVERSION
        , DEBDEPENDS, DEBDESC)
    f = open(str(target[0]), 'w')
    f.write(control_info)
    f.close()
    
# We can generate the control file by calling make_control
env.Command(DEBCONTROLFILE, None, make_control)

# And we can generate the .deb file by calling dpkg-deb
env.Command(debpkg, DEBCONTROLFILE,
            'fakeroot dpkg-deb -b %s %s' % ('deb/%s' % DEBNAME, '$TARGET'))
